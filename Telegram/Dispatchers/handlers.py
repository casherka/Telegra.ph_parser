from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import Telegram.Dispatchers.keyboards as kb
import multiprocessing
import os
from parser import bot_main
import Telegram.Database.requests as db


router = Router()


class InputTitle(StatesGroup):
    Input = State()


class GivePremiumInput(StatesGroup):
    Input = State()


class ClaimPremiumInput(StatesGroup):
    Input = State()


@router.message(CommandStart())
async def cmd_start(message: Message):
    await db.set_user(message.from_user.id, message.from_user.username,
                      f"{message.from_user.first_name} {message.from_user.last_name}")
    premium = await db.get_premium(message.from_user.id)
    admin = await db.get_admin(message.from_user.id)
    if admin and premium:
        await message.answer('üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–∞–π—Ç–∞ telgra.ph!\n\n'
                             # ------------------
                             'üíé –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\n'
                             # ------------------
                             'üëë –ê–¥–º–∏–Ω —Ä–µ–∂–∏–º.', reply_markup=kb.about_admin)
    elif admin and not premium:
        await message.answer('üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–∞–π—Ç–∞ telgra.ph!\n\n'
                             # ------------------
                             'üíé –ü—Ä–µ–º–∏—É–º –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\n'
                             # ------------------
                             'üëë –ê–¥–º–∏–Ω —Ä–µ–∂–∏–º.', reply_markup=kb.about_admin)
    elif premium and not admin:
        await message.answer('üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–∞–π—Ç–∞ telgra.ph!\n\n'
                             # ------------------
                             'üîç –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∏ —è –±—ã—Å—Ç—Ä–æ –Ω–∞–π–¥—É –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–±—è.\n\n'
                             # ------------------
                             'üíé –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.', reply_markup=kb.about)
    elif not premium and not admin:
        await message.answer('üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–∞–π—Ç–∞ telgra.ph!\n\n'
                             # ------------------
                             'üîç –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∏ —è –±—ã—Å—Ç—Ä–æ –Ω–∞–π–¥—É –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–±—è.\n\n'
                             # ------------------
                             'üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: [–≤—Å—Ç–∞–≤—å —Å—É–º–º—É] –≤ –º–µ—Å—è—Ü. –ü–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –∏ '
                             '–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º!\n\n'
                             # ------------------
                             'üíé –£ –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 6 –¥–Ω–µ–π, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –æ—Ü–µ–Ω–∏—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ –±–µ–∑ '
                             '–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤!', reply_markup=kb.about)


@router.callback_query(F.data == 'About')
async def about(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text('–ü—Ä–∏–≤–µ—Ç! üëã –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ '
                                     '–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–∞–π—Ç–∞ telgra.ph. –ü—Ä–æ—Å—Ç–æ –¥–∞–π –º–Ω–µ '
                                     '–∫–æ–º–∞–Ω–¥—É, –∏ —è –Ω–∞–π–¥—É –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–±—è! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å '
                                     '—Å–µ–≥–æ–¥–Ω—è? üöÄ', reply_markup=kb.back)


@router.callback_query(F.data == 'Back')
async def about_back(callback: CallbackQuery):
    await callback.answer('')
    premium = await db.get_premium(callback.from_user.id)
    admin = await db.get_admin(callback.from_user.id)
    if admin and premium:
        await callback.message.edit_text('üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫-–±–æ—Ç,'
                                         ' –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–∞–π—Ç–∞ telgra.ph!\n\n'
                                         # ------------------
                                         'üíé –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\n'
                                         # ------------------
                                         'üëë –ê–¥–º–∏–Ω —Ä–µ–∂–∏–º.', reply_markup=kb.about_admin)
    elif admin and not premium:
        await callback.message.edit_text('üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π '
                                         '—É–º–µ–µ—Ç –ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–∞–π—Ç–∞ telgra.ph!\n\n'
                                         # ------------------
                                         'üíé –ü—Ä–µ–º–∏—É–º –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\n'
                                         # ------------------
                                         'üëë –ê–¥–º–∏–Ω —Ä–µ–∂–∏–º.', reply_markup=kb.about_admin)
    elif premium and not admin:
        await callback.message.edit_text('üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π '
                                         '—É–º–µ–µ—Ç –ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–∞–π—Ç–∞ telgra.ph!\n\n'
                                         # ------------------
                                         'üîç –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, '
                                         '–∏ —è –±—ã—Å—Ç—Ä–æ –Ω–∞–π–¥—É –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–±—è.\n\n'
                                         # ------------------
                                         'üíé –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.', reply_markup=kb.about)
    elif not premium and not admin:
        await callback.message.edit_text('üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç'
                                         ' –ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–∞–π—Ç–∞ telgra.ph!\n\n'
                                         # ------------------
                                         'üîç –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç,'
                                         ' –∏ —è –±—ã—Å—Ç—Ä–æ –Ω–∞–π–¥—É –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–±—è.\n\n'
                                         # ------------------
                                         'üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: [–≤—Å—Ç–∞–≤—å —Å—É–º–º—É] –≤ –º–µ—Å—è—Ü.'
                                         ' –ü–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –∏ '
                                         '–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º!\n\n'
                                         # ------------------
                                         'üíé –£ –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 6 –¥–Ω–µ–π,'
                                         ' —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –æ—Ü–µ–Ω–∏—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ –±–µ–∑ '
                                         '–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤!', reply_markup=kb.about)


@router.callback_query(F.data == 'Start')
async def input_title(callback: CallbackQuery, state: FSMContext):
    await state.set_state(InputTitle.Input)
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:', reply_markup=kb.cancel_enter)
    await callback.answer('')


@router.callback_query(F.data == 'Give_premium')
async def input_give_id(callback: CallbackQuery, state: FSMContext):
    await state.set_state(GivePremiumInput.Input)
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ Id:', reply_markup=kb.cancel_enter)
    await callback.answer('')


@router.callback_query(F.data == 'Claim_premium')
async def input_claim_id(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ClaimPremiumInput.Input)
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ Id:', reply_markup=kb.cancel_enter)
    await callback.answer('')


@router.message(ClaimPremiumInput.Input)
async def claim_premium(message: Message, state: FSMContext):
    await state.update_data(Id=message.text)
    data = await state.get_data()
    await state.clear()
    admin = await db.get_admin(message.from_user.id)
    if admin:
        await db.delete_premium(data['Id'])
        await message.answer(f"üóë –ü—Ä–µ–º–∏—É–º —É–¥–∞–ª—ë–Ω —É {data['Id']}")
    else:
        await message.answer(f"üö´ –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")


@router.message(GivePremiumInput.Input)
async def give_premium(message: Message, state: FSMContext):
    await state.update_data(Id=message.text)
    data = await state.get_data()
    await state.clear()
    admin = await db.get_admin(message.from_user.id)
    if admin:
        await db.set_premium(data['Id'])
        await message.answer(f"üéÅ –ü—Ä–µ–º–∏—É–º –≤—ã–¥–∞–Ω {data['Id']}")
    else:
        await message.answer(f"üö´ –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")


@router.message(InputTitle.Input)
async def start(message: Message, state: FSMContext):
    await state.update_data(Title=message.text)
    data = await state.get_data()
    await state.clear()
    premium = await db.get_premium(message.from_user.id)
    if premium:
        await message.answer(f"‚è≥ –ó–∞–ø—É—Å–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º: {data['Title']}...")
        try:
            os.mkdir(str(message.from_user.id))
        except FileExistsError:
            pass

        process = multiprocessing.Process(target=bot_main, args=(data['Title'], message.from_user.id,))
        process.start()
    else:
        await message.answer(f'''‚ö†Ô∏è –ó–∞–ø—É—Å–∫ "{data['Title']}" –æ—Ç–º–µ–Ω—ë–Ω\n\n'''
                             f"üîë –ü—Ä–µ–º–∏—É–º –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")


@router.callback_query(F.data == 'Cancel_ent')
async def cancel_input(callback: CallbackQuery, state: FSMContext):
    state_chk = await state.get_state()
    if state_chk == 'InputTitle:Input' or 'GivePremiumInput:Input' or 'ClaimPremiumInput:Input':
        await state.clear()
        premium = await db.get_premium(callback.from_user.id)
        admin = await db.get_admin(callback.from_user.id)
        if admin and premium:
            await callback.message.edit_text('üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫-–±–æ—Ç,'
                                             ' –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–∞–π—Ç–∞ telgra.ph!\n\n'
                                             # ------------------
                                             'üíé –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\n'
                                             # ------------------
                                             'üëë –ê–¥–º–∏–Ω —Ä–µ–∂–∏–º.', reply_markup=kb.about_admin)
        elif admin and not premium:
            await callback.message.edit_text('üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π '
                                             '—É–º–µ–µ—Ç –ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–∞–π—Ç–∞ telgra.ph!\n\n'
                                             # ------------------
                                             'üíé –ü—Ä–µ–º–∏—É–º –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\n'
                                             # ------------------
                                             'üëë –ê–¥–º–∏–Ω —Ä–µ–∂–∏–º.', reply_markup=kb.about_admin)
        elif premium and not admin:
            await callback.message.edit_text('üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π '
                                             '—É–º–µ–µ—Ç –ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–∞–π—Ç–∞ telgra.ph!\n\n'
                                             # ------------------
                                             'üîç –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, '
                                             '–∏ —è –±—ã—Å—Ç—Ä–æ –Ω–∞–π–¥—É –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–±—è.\n\n'
                                             # ------------------
                                             'üíé –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.', reply_markup=kb.about)
        elif not premium and not admin:
            await callback.message.edit_text('üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç'
                                             ' –ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–∞–π—Ç–∞ telgra.ph!\n\n'
                                             # ------------------
                                             'üîç –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç,'
                                             ' –∏ —è –±—ã—Å—Ç—Ä–æ –Ω–∞–π–¥—É –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–±—è.\n\n'
                                             # ------------------
                                             'üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: [–≤—Å—Ç–∞–≤—å —Å—É–º–º—É] –≤ –º–µ—Å—è—Ü.'
                                             ' –ü–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –∏ '
                                             '–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º!\n\n'
                                             # ------------------
                                             'üíé –£ –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 6 –¥–Ω–µ–π,'
                                             ' —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –æ—Ü–µ–Ω–∏—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ –±–µ–∑ '
                                             '–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤!', reply_markup=kb.about)
    else:
        await callback.message.delete()
    await callback.answer('')
